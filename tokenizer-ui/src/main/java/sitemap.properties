# File format version 2.0
# This section identifies all the packages which may contain views.  The most efficient use is to identify 
# only the root package(s) here, and qualify with sub-packages in the map section
# syntax is like this:  org.tokenizer.ui.app.views
[viewPackages]
org.tokenizer.ui.base.view
org.tokenizer.ui.demo.view

[options]
# The fully qualified name of the enum class to use for label keys
labelKeys=org.tokenizer.ui.demo.i18n.DemoLabelKeys

# if true, 'View' is appended to all view names in the tree - just makes things a it more readable
appendView=false

#default view to use use when standard, account related page does not specify a view
defaultAccountView=AccountRequestView

#standard pages for things like account management, login/out etc.  These have (enum) StandardPageKeys associated with them
#format pageKey=url:view
#the label key is provided by the StandardPageKey
#arbitrary spaces can be used
[standardPages]
publicHome     = public/home                  : PublicHomeView
secureHome     = secure/home                  : SecureHomeView
login          = public/login                 : LoginView
logout         = public/logout                : LogoutView
resetAccount   = public/reset-account
unlockAccount  = public/unlock-account
refreshAccount = public/refresh-account
requestAccount = public/request-account
enableAccount  = public/enable-account

#redirect from : to  
#Empty space is taken to be the root url
[redirects]
       : public/home
public : public/home
secure : secure/home


[map]
# This section is the site map
# prefix view with ':'
# prefix label key with '~'
# structure of map entry is:
# indentation, url segment, then view and label key can be either way round
# indentation: the number of '-' represents tree indentation.  A single '-' is the highest level.
# base url: a page without a name (in other words the base url) is specified like this   -:   HomeView  ~ home
# if view not specified it is capitalised version of url segment (for url segment 'home' view is Home or HomeView depending on value of 'appendView')
# if label key is not specified, the url segment is used as it is
# example:  --secure :SecureHome ~home
# arbitrary spaces can be used, they are stripped out before processing
# if a url has been redirected, it is ignored for views and labels
# if standard pages are not defined in the map, they are added automatically - this does affect the order in which the pages are presented

-public
--view2     : View2

-secure
--view1     : View1
