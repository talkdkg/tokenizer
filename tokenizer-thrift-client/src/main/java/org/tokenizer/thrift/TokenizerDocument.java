/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.tokenizer.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TokenizerDocument implements org.apache.thrift.TBase<TokenizerDocument, TokenizerDocument._Fields>, java.io.Serializable, Cloneable, Comparable<TokenizerDocument> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TokenizerDocument");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)-1);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)-2);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I64, (short)-3);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("author", org.apache.thrift.protocol.TType.STRING, (short)-4);
  private static final org.apache.thrift.protocol.TField AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("age", org.apache.thrift.protocol.TType.STRING, (short)-5);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I32, (short)-6);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)-7);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)-8);
  private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRING, (short)-9);
  private static final org.apache.thrift.protocol.TField USER_RATING_FIELD_DESC = new org.apache.thrift.protocol.TField("userRating", org.apache.thrift.protocol.TType.STRING, (short)-10);
  private static final org.apache.thrift.protocol.TField SENTIMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("sentiment", org.apache.thrift.protocol.TType.I32, (short)-11);
  private static final org.apache.thrift.protocol.TField FEATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("features", org.apache.thrift.protocol.TType.SET, (short)-12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TokenizerDocumentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TokenizerDocumentTupleSchemeFactory());
  }

  public String id; // required
  public String source; // required
  public long date; // required
  public String author; // required
  public String age; // required
  /**
   * 
   * @see Gender
   */
  public Gender gender; // required
  public String title; // required
  public String content; // required
  public String topic; // required
  public String userRating; // required
  public int sentiment; // required
  public Set<String> features; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)-1, "id"),
    SOURCE((short)-2, "source"),
    DATE((short)-3, "date"),
    AUTHOR((short)-4, "author"),
    AGE((short)-5, "age"),
    /**
     * 
     * @see Gender
     */
    GENDER((short)-6, "gender"),
    TITLE((short)-7, "title"),
    CONTENT((short)-8, "content"),
    TOPIC((short)-9, "topic"),
    USER_RATING((short)-10, "userRating"),
    SENTIMENT((short)-11, "sentiment"),
    FEATURES((short)-12, "features");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case -1: // ID
          return ID;
        case -2: // SOURCE
          return SOURCE;
        case -3: // DATE
          return DATE;
        case -4: // AUTHOR
          return AUTHOR;
        case -5: // AGE
          return AGE;
        case -6: // GENDER
          return GENDER;
        case -7: // TITLE
          return TITLE;
        case -8: // CONTENT
          return CONTENT;
        case -9: // TOPIC
          return TOPIC;
        case -10: // USER_RATING
          return USER_RATING;
        case -11: // SENTIMENT
          return SENTIMENT;
        case -12: // FEATURES
          return FEATURES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DATE_ISSET_ID = 0;
  private static final int __SENTIMENT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGE, new org.apache.thrift.meta_data.FieldMetaData("age", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Gender.class)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_RATING, new org.apache.thrift.meta_data.FieldMetaData("userRating", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SENTIMENT, new org.apache.thrift.meta_data.FieldMetaData("sentiment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FEATURES, new org.apache.thrift.meta_data.FieldMetaData("features", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TokenizerDocument.class, metaDataMap);
  }

  public TokenizerDocument() {
  }

  public TokenizerDocument(
    String id,
    String source,
    long date,
    String author,
    String age,
    Gender gender,
    String title,
    String content,
    String topic,
    String userRating,
    int sentiment,
    Set<String> features)
  {
    this();
    this.id = id;
    this.source = source;
    this.date = date;
    setDateIsSet(true);
    this.author = author;
    this.age = age;
    this.gender = gender;
    this.title = title;
    this.content = content;
    this.topic = topic;
    this.userRating = userRating;
    this.sentiment = sentiment;
    setSentimentIsSet(true);
    this.features = features;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TokenizerDocument(TokenizerDocument other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetSource()) {
      this.source = other.source;
    }
    this.date = other.date;
    if (other.isSetAuthor()) {
      this.author = other.author;
    }
    if (other.isSetAge()) {
      this.age = other.age;
    }
    if (other.isSetGender()) {
      this.gender = other.gender;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetTopic()) {
      this.topic = other.topic;
    }
    if (other.isSetUserRating()) {
      this.userRating = other.userRating;
    }
    this.sentiment = other.sentiment;
    if (other.isSetFeatures()) {
      Set<String> __this__features = new HashSet<String>(other.features);
      this.features = __this__features;
    }
  }

  public TokenizerDocument deepCopy() {
    return new TokenizerDocument(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.source = null;
    setDateIsSet(false);
    this.date = 0;
    this.author = null;
    this.age = null;
    this.gender = null;
    this.title = null;
    this.content = null;
    this.topic = null;
    this.userRating = null;
    setSentimentIsSet(false);
    this.sentiment = 0;
    this.features = null;
  }

  public String getId() {
    return this.id;
  }

  public TokenizerDocument setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getSource() {
    return this.source;
  }

  public TokenizerDocument setSource(String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public long getDate() {
    return this.date;
  }

  public TokenizerDocument setDate(long date) {
    this.date = date;
    setDateIsSet(true);
    return this;
  }

  public void unsetDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  public void setDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
  }

  public String getAuthor() {
    return this.author;
  }

  public TokenizerDocument setAuthor(String author) {
    this.author = author;
    return this;
  }

  public void unsetAuthor() {
    this.author = null;
  }

  /** Returns true if field author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return this.author != null;
  }

  public void setAuthorIsSet(boolean value) {
    if (!value) {
      this.author = null;
    }
  }

  public String getAge() {
    return this.age;
  }

  public TokenizerDocument setAge(String age) {
    this.age = age;
    return this;
  }

  public void unsetAge() {
    this.age = null;
  }

  /** Returns true if field age is set (has been assigned a value) and false otherwise */
  public boolean isSetAge() {
    return this.age != null;
  }

  public void setAgeIsSet(boolean value) {
    if (!value) {
      this.age = null;
    }
  }

  /**
   * 
   * @see Gender
   */
  public Gender getGender() {
    return this.gender;
  }

  /**
   * 
   * @see Gender
   */
  public TokenizerDocument setGender(Gender gender) {
    this.gender = gender;
    return this;
  }

  public void unsetGender() {
    this.gender = null;
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return this.gender != null;
  }

  public void setGenderIsSet(boolean value) {
    if (!value) {
      this.gender = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public TokenizerDocument setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public TokenizerDocument setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getTopic() {
    return this.topic;
  }

  public TokenizerDocument setTopic(String topic) {
    this.topic = topic;
    return this;
  }

  public void unsetTopic() {
    this.topic = null;
  }

  /** Returns true if field topic is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic() {
    return this.topic != null;
  }

  public void setTopicIsSet(boolean value) {
    if (!value) {
      this.topic = null;
    }
  }

  public String getUserRating() {
    return this.userRating;
  }

  public TokenizerDocument setUserRating(String userRating) {
    this.userRating = userRating;
    return this;
  }

  public void unsetUserRating() {
    this.userRating = null;
  }

  /** Returns true if field userRating is set (has been assigned a value) and false otherwise */
  public boolean isSetUserRating() {
    return this.userRating != null;
  }

  public void setUserRatingIsSet(boolean value) {
    if (!value) {
      this.userRating = null;
    }
  }

  public int getSentiment() {
    return this.sentiment;
  }

  public TokenizerDocument setSentiment(int sentiment) {
    this.sentiment = sentiment;
    setSentimentIsSet(true);
    return this;
  }

  public void unsetSentiment() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENTIMENT_ISSET_ID);
  }

  /** Returns true if field sentiment is set (has been assigned a value) and false otherwise */
  public boolean isSetSentiment() {
    return EncodingUtils.testBit(__isset_bitfield, __SENTIMENT_ISSET_ID);
  }

  public void setSentimentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENTIMENT_ISSET_ID, value);
  }

  public int getFeaturesSize() {
    return (this.features == null) ? 0 : this.features.size();
  }

  public java.util.Iterator<String> getFeaturesIterator() {
    return (this.features == null) ? null : this.features.iterator();
  }

  public void addToFeatures(String elem) {
    if (this.features == null) {
      this.features = new HashSet<String>();
    }
    this.features.add(elem);
  }

  public Set<String> getFeatures() {
    return this.features;
  }

  public TokenizerDocument setFeatures(Set<String> features) {
    this.features = features;
    return this;
  }

  public void unsetFeatures() {
    this.features = null;
  }

  /** Returns true if field features is set (has been assigned a value) and false otherwise */
  public boolean isSetFeatures() {
    return this.features != null;
  }

  public void setFeaturesIsSet(boolean value) {
    if (!value) {
      this.features = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((Long)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((String)value);
      }
      break;

    case AGE:
      if (value == null) {
        unsetAge();
      } else {
        setAge((String)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Gender)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case TOPIC:
      if (value == null) {
        unsetTopic();
      } else {
        setTopic((String)value);
      }
      break;

    case USER_RATING:
      if (value == null) {
        unsetUserRating();
      } else {
        setUserRating((String)value);
      }
      break;

    case SENTIMENT:
      if (value == null) {
        unsetSentiment();
      } else {
        setSentiment((Integer)value);
      }
      break;

    case FEATURES:
      if (value == null) {
        unsetFeatures();
      } else {
        setFeatures((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case SOURCE:
      return getSource();

    case DATE:
      return Long.valueOf(getDate());

    case AUTHOR:
      return getAuthor();

    case AGE:
      return getAge();

    case GENDER:
      return getGender();

    case TITLE:
      return getTitle();

    case CONTENT:
      return getContent();

    case TOPIC:
      return getTopic();

    case USER_RATING:
      return getUserRating();

    case SENTIMENT:
      return Integer.valueOf(getSentiment());

    case FEATURES:
      return getFeatures();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case SOURCE:
      return isSetSource();
    case DATE:
      return isSetDate();
    case AUTHOR:
      return isSetAuthor();
    case AGE:
      return isSetAge();
    case GENDER:
      return isSetGender();
    case TITLE:
      return isSetTitle();
    case CONTENT:
      return isSetContent();
    case TOPIC:
      return isSetTopic();
    case USER_RATING:
      return isSetUserRating();
    case SENTIMENT:
      return isSetSentiment();
    case FEATURES:
      return isSetFeatures();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TokenizerDocument)
      return this.equals((TokenizerDocument)that);
    return false;
  }

  public boolean equals(TokenizerDocument that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_date = true;
    boolean that_present_date = true;
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (this.date != that.date)
        return false;
    }

    boolean this_present_author = true && this.isSetAuthor();
    boolean that_present_author = true && that.isSetAuthor();
    if (this_present_author || that_present_author) {
      if (!(this_present_author && that_present_author))
        return false;
      if (!this.author.equals(that.author))
        return false;
    }

    boolean this_present_age = true && this.isSetAge();
    boolean that_present_age = true && that.isSetAge();
    if (this_present_age || that_present_age) {
      if (!(this_present_age && that_present_age))
        return false;
      if (!this.age.equals(that.age))
        return false;
    }

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (!this.gender.equals(that.gender))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_topic = true && this.isSetTopic();
    boolean that_present_topic = true && that.isSetTopic();
    if (this_present_topic || that_present_topic) {
      if (!(this_present_topic && that_present_topic))
        return false;
      if (!this.topic.equals(that.topic))
        return false;
    }

    boolean this_present_userRating = true && this.isSetUserRating();
    boolean that_present_userRating = true && that.isSetUserRating();
    if (this_present_userRating || that_present_userRating) {
      if (!(this_present_userRating && that_present_userRating))
        return false;
      if (!this.userRating.equals(that.userRating))
        return false;
    }

    boolean this_present_sentiment = true;
    boolean that_present_sentiment = true;
    if (this_present_sentiment || that_present_sentiment) {
      if (!(this_present_sentiment && that_present_sentiment))
        return false;
      if (this.sentiment != that.sentiment)
        return false;
    }

    boolean this_present_features = true && this.isSetFeatures();
    boolean that_present_features = true && that.isSetFeatures();
    if (this_present_features || that_present_features) {
      if (!(this_present_features && that_present_features))
        return false;
      if (!this.features.equals(that.features))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TokenizerDocument other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, other.author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAge()).compareTo(other.isSetAge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.age, other.age);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserRating()).compareTo(other.isSetUserRating());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserRating()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userRating, other.userRating);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSentiment()).compareTo(other.isSetSentiment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSentiment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentiment, other.sentiment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeatures()).compareTo(other.isSetFeatures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeatures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.features, other.features);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TokenizerDocument(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("source:");
    if (this.source == null) {
      sb.append("null");
    } else {
      sb.append(this.source);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    sb.append(this.date);
    first = false;
    if (!first) sb.append(", ");
    sb.append("author:");
    if (this.author == null) {
      sb.append("null");
    } else {
      sb.append(this.author);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("age:");
    if (this.age == null) {
      sb.append("null");
    } else {
      sb.append(this.age);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gender:");
    if (this.gender == null) {
      sb.append("null");
    } else {
      sb.append(this.gender);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topic:");
    if (this.topic == null) {
      sb.append("null");
    } else {
      sb.append(this.topic);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userRating:");
    if (this.userRating == null) {
      sb.append("null");
    } else {
      sb.append(this.userRating);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sentiment:");
    sb.append(this.sentiment);
    first = false;
    if (!first) sb.append(", ");
    sb.append("features:");
    if (this.features == null) {
      sb.append("null");
    } else {
      sb.append(this.features);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TokenizerDocumentStandardSchemeFactory implements SchemeFactory {
    public TokenizerDocumentStandardScheme getScheme() {
      return new TokenizerDocumentStandardScheme();
    }
  }

  private static class TokenizerDocumentStandardScheme extends StandardScheme<TokenizerDocument> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TokenizerDocument struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case -1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -2: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -3: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.date = iprot.readI64();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -4: // AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.author = iprot.readString();
              struct.setAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -5: // AGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.age = iprot.readString();
              struct.setAgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -6: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gender = Gender.findByValue(iprot.readI32());
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -7: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -8: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -9: // TOPIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topic = iprot.readString();
              struct.setTopicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -10: // USER_RATING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userRating = iprot.readString();
              struct.setUserRatingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -11: // SENTIMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sentiment = iprot.readI32();
              struct.setSentimentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -12: // FEATURES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.features = new HashSet<String>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.features.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setFeaturesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TokenizerDocument struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.features != null) {
        oprot.writeFieldBegin(FEATURES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.features.size()));
          for (String _iter3 : struct.features)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SENTIMENT_FIELD_DESC);
      oprot.writeI32(struct.sentiment);
      oprot.writeFieldEnd();
      if (struct.userRating != null) {
        oprot.writeFieldBegin(USER_RATING_FIELD_DESC);
        oprot.writeString(struct.userRating);
        oprot.writeFieldEnd();
      }
      if (struct.topic != null) {
        oprot.writeFieldBegin(TOPIC_FIELD_DESC);
        oprot.writeString(struct.topic);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.gender != null) {
        oprot.writeFieldBegin(GENDER_FIELD_DESC);
        oprot.writeI32(struct.gender.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.age != null) {
        oprot.writeFieldBegin(AGE_FIELD_DESC);
        oprot.writeString(struct.age);
        oprot.writeFieldEnd();
      }
      if (struct.author != null) {
        oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
        oprot.writeString(struct.author);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DATE_FIELD_DESC);
      oprot.writeI64(struct.date);
      oprot.writeFieldEnd();
      if (struct.source != null) {
        oprot.writeFieldBegin(SOURCE_FIELD_DESC);
        oprot.writeString(struct.source);
        oprot.writeFieldEnd();
      }
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TokenizerDocumentTupleSchemeFactory implements SchemeFactory {
    public TokenizerDocumentTupleScheme getScheme() {
      return new TokenizerDocumentTupleScheme();
    }
  }

  private static class TokenizerDocumentTupleScheme extends TupleScheme<TokenizerDocument> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TokenizerDocument struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetSource()) {
        optionals.set(1);
      }
      if (struct.isSetDate()) {
        optionals.set(2);
      }
      if (struct.isSetAuthor()) {
        optionals.set(3);
      }
      if (struct.isSetAge()) {
        optionals.set(4);
      }
      if (struct.isSetGender()) {
        optionals.set(5);
      }
      if (struct.isSetTitle()) {
        optionals.set(6);
      }
      if (struct.isSetContent()) {
        optionals.set(7);
      }
      if (struct.isSetTopic()) {
        optionals.set(8);
      }
      if (struct.isSetUserRating()) {
        optionals.set(9);
      }
      if (struct.isSetSentiment()) {
        optionals.set(10);
      }
      if (struct.isSetFeatures()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetDate()) {
        oprot.writeI64(struct.date);
      }
      if (struct.isSetAuthor()) {
        oprot.writeString(struct.author);
      }
      if (struct.isSetAge()) {
        oprot.writeString(struct.age);
      }
      if (struct.isSetGender()) {
        oprot.writeI32(struct.gender.getValue());
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetTopic()) {
        oprot.writeString(struct.topic);
      }
      if (struct.isSetUserRating()) {
        oprot.writeString(struct.userRating);
      }
      if (struct.isSetSentiment()) {
        oprot.writeI32(struct.sentiment);
      }
      if (struct.isSetFeatures()) {
        {
          oprot.writeI32(struct.features.size());
          for (String _iter4 : struct.features)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TokenizerDocument struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.date = iprot.readI64();
        struct.setDateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.author = iprot.readString();
        struct.setAuthorIsSet(true);
      }
      if (incoming.get(4)) {
        struct.age = iprot.readString();
        struct.setAgeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.gender = Gender.findByValue(iprot.readI32());
        struct.setGenderIsSet(true);
      }
      if (incoming.get(6)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(7)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(8)) {
        struct.topic = iprot.readString();
        struct.setTopicIsSet(true);
      }
      if (incoming.get(9)) {
        struct.userRating = iprot.readString();
        struct.setUserRatingIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sentiment = iprot.readI32();
        struct.setSentimentIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.features = new HashSet<String>(2*_set5.size);
          for (int _i6 = 0; _i6 < _set5.size; ++_i6)
          {
            String _elem7;
            _elem7 = iprot.readString();
            struct.features.add(_elem7);
          }
        }
        struct.setFeaturesIsSet(true);
      }
    }
  }

}

