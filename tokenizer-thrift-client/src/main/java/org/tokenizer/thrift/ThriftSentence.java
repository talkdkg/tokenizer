/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.tokenizer.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftSentence implements org.apache.thrift.TBase<ThriftSentence, ThriftSentence._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftSentence> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftSentence");

  private static final org.apache.thrift.protocol.TField SENTENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("sentence", org.apache.thrift.protocol.TType.STRING, (short)-1);
  private static final org.apache.thrift.protocol.TField FEATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("features", org.apache.thrift.protocol.TType.SET, (short)-2);
  private static final org.apache.thrift.protocol.TField TREEBANK_FIELD_DESC = new org.apache.thrift.protocol.TField("treebank", org.apache.thrift.protocol.TType.STRING, (short)-3);
  private static final org.apache.thrift.protocol.TField CHUNKS_FIELD_DESC = new org.apache.thrift.protocol.TField("chunks", org.apache.thrift.protocol.TType.LIST, (short)-4);
  private static final org.apache.thrift.protocol.TField SENTIMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("sentiment", org.apache.thrift.protocol.TType.I32, (short)-5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftSentenceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftSentenceTupleSchemeFactory());
  }

  public String sentence; // required
  public Set<String> features; // required
  public String treebank; // required
  public List<String> chunks; // required
  public int sentiment; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SENTENCE((short)-1, "sentence"),
    FEATURES((short)-2, "features"),
    TREEBANK((short)-3, "treebank"),
    CHUNKS((short)-4, "chunks"),
    SENTIMENT((short)-5, "sentiment");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case -1: // SENTENCE
          return SENTENCE;
        case -2: // FEATURES
          return FEATURES;
        case -3: // TREEBANK
          return TREEBANK;
        case -4: // CHUNKS
          return CHUNKS;
        case -5: // SENTIMENT
          return SENTIMENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SENTIMENT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SENTENCE, new org.apache.thrift.meta_data.FieldMetaData("sentence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEATURES, new org.apache.thrift.meta_data.FieldMetaData("features", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TREEBANK, new org.apache.thrift.meta_data.FieldMetaData("treebank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHUNKS, new org.apache.thrift.meta_data.FieldMetaData("chunks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SENTIMENT, new org.apache.thrift.meta_data.FieldMetaData("sentiment", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftSentence.class, metaDataMap);
  }

  public ThriftSentence() {
  }

  public ThriftSentence(
    String sentence,
    Set<String> features,
    String treebank,
    List<String> chunks,
    int sentiment)
  {
    this();
    this.sentence = sentence;
    this.features = features;
    this.treebank = treebank;
    this.chunks = chunks;
    this.sentiment = sentiment;
    setSentimentIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftSentence(ThriftSentence other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSentence()) {
      this.sentence = other.sentence;
    }
    if (other.isSetFeatures()) {
      Set<String> __this__features = new HashSet<String>(other.features);
      this.features = __this__features;
    }
    if (other.isSetTreebank()) {
      this.treebank = other.treebank;
    }
    if (other.isSetChunks()) {
      List<String> __this__chunks = new ArrayList<String>(other.chunks);
      this.chunks = __this__chunks;
    }
    this.sentiment = other.sentiment;
  }

  public ThriftSentence deepCopy() {
    return new ThriftSentence(this);
  }

  @Override
  public void clear() {
    this.sentence = null;
    this.features = null;
    this.treebank = null;
    this.chunks = null;
    setSentimentIsSet(false);
    this.sentiment = 0;
  }

  public String getSentence() {
    return this.sentence;
  }

  public ThriftSentence setSentence(String sentence) {
    this.sentence = sentence;
    return this;
  }

  public void unsetSentence() {
    this.sentence = null;
  }

  /** Returns true if field sentence is set (has been assigned a value) and false otherwise */
  public boolean isSetSentence() {
    return this.sentence != null;
  }

  public void setSentenceIsSet(boolean value) {
    if (!value) {
      this.sentence = null;
    }
  }

  public int getFeaturesSize() {
    return (this.features == null) ? 0 : this.features.size();
  }

  public java.util.Iterator<String> getFeaturesIterator() {
    return (this.features == null) ? null : this.features.iterator();
  }

  public void addToFeatures(String elem) {
    if (this.features == null) {
      this.features = new HashSet<String>();
    }
    this.features.add(elem);
  }

  public Set<String> getFeatures() {
    return this.features;
  }

  public ThriftSentence setFeatures(Set<String> features) {
    this.features = features;
    return this;
  }

  public void unsetFeatures() {
    this.features = null;
  }

  /** Returns true if field features is set (has been assigned a value) and false otherwise */
  public boolean isSetFeatures() {
    return this.features != null;
  }

  public void setFeaturesIsSet(boolean value) {
    if (!value) {
      this.features = null;
    }
  }

  public String getTreebank() {
    return this.treebank;
  }

  public ThriftSentence setTreebank(String treebank) {
    this.treebank = treebank;
    return this;
  }

  public void unsetTreebank() {
    this.treebank = null;
  }

  /** Returns true if field treebank is set (has been assigned a value) and false otherwise */
  public boolean isSetTreebank() {
    return this.treebank != null;
  }

  public void setTreebankIsSet(boolean value) {
    if (!value) {
      this.treebank = null;
    }
  }

  public int getChunksSize() {
    return (this.chunks == null) ? 0 : this.chunks.size();
  }

  public java.util.Iterator<String> getChunksIterator() {
    return (this.chunks == null) ? null : this.chunks.iterator();
  }

  public void addToChunks(String elem) {
    if (this.chunks == null) {
      this.chunks = new ArrayList<String>();
    }
    this.chunks.add(elem);
  }

  public List<String> getChunks() {
    return this.chunks;
  }

  public ThriftSentence setChunks(List<String> chunks) {
    this.chunks = chunks;
    return this;
  }

  public void unsetChunks() {
    this.chunks = null;
  }

  /** Returns true if field chunks is set (has been assigned a value) and false otherwise */
  public boolean isSetChunks() {
    return this.chunks != null;
  }

  public void setChunksIsSet(boolean value) {
    if (!value) {
      this.chunks = null;
    }
  }

  public int getSentiment() {
    return this.sentiment;
  }

  public ThriftSentence setSentiment(int sentiment) {
    this.sentiment = sentiment;
    setSentimentIsSet(true);
    return this;
  }

  public void unsetSentiment() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SENTIMENT_ISSET_ID);
  }

  /** Returns true if field sentiment is set (has been assigned a value) and false otherwise */
  public boolean isSetSentiment() {
    return EncodingUtils.testBit(__isset_bitfield, __SENTIMENT_ISSET_ID);
  }

  public void setSentimentIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SENTIMENT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SENTENCE:
      if (value == null) {
        unsetSentence();
      } else {
        setSentence((String)value);
      }
      break;

    case FEATURES:
      if (value == null) {
        unsetFeatures();
      } else {
        setFeatures((Set<String>)value);
      }
      break;

    case TREEBANK:
      if (value == null) {
        unsetTreebank();
      } else {
        setTreebank((String)value);
      }
      break;

    case CHUNKS:
      if (value == null) {
        unsetChunks();
      } else {
        setChunks((List<String>)value);
      }
      break;

    case SENTIMENT:
      if (value == null) {
        unsetSentiment();
      } else {
        setSentiment((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SENTENCE:
      return getSentence();

    case FEATURES:
      return getFeatures();

    case TREEBANK:
      return getTreebank();

    case CHUNKS:
      return getChunks();

    case SENTIMENT:
      return Integer.valueOf(getSentiment());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SENTENCE:
      return isSetSentence();
    case FEATURES:
      return isSetFeatures();
    case TREEBANK:
      return isSetTreebank();
    case CHUNKS:
      return isSetChunks();
    case SENTIMENT:
      return isSetSentiment();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftSentence)
      return this.equals((ThriftSentence)that);
    return false;
  }

  public boolean equals(ThriftSentence that) {
    if (that == null)
      return false;

    boolean this_present_sentence = true && this.isSetSentence();
    boolean that_present_sentence = true && that.isSetSentence();
    if (this_present_sentence || that_present_sentence) {
      if (!(this_present_sentence && that_present_sentence))
        return false;
      if (!this.sentence.equals(that.sentence))
        return false;
    }

    boolean this_present_features = true && this.isSetFeatures();
    boolean that_present_features = true && that.isSetFeatures();
    if (this_present_features || that_present_features) {
      if (!(this_present_features && that_present_features))
        return false;
      if (!this.features.equals(that.features))
        return false;
    }

    boolean this_present_treebank = true && this.isSetTreebank();
    boolean that_present_treebank = true && that.isSetTreebank();
    if (this_present_treebank || that_present_treebank) {
      if (!(this_present_treebank && that_present_treebank))
        return false;
      if (!this.treebank.equals(that.treebank))
        return false;
    }

    boolean this_present_chunks = true && this.isSetChunks();
    boolean that_present_chunks = true && that.isSetChunks();
    if (this_present_chunks || that_present_chunks) {
      if (!(this_present_chunks && that_present_chunks))
        return false;
      if (!this.chunks.equals(that.chunks))
        return false;
    }

    boolean this_present_sentiment = true;
    boolean that_present_sentiment = true;
    if (this_present_sentiment || that_present_sentiment) {
      if (!(this_present_sentiment && that_present_sentiment))
        return false;
      if (this.sentiment != that.sentiment)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ThriftSentence other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSentence()).compareTo(other.isSetSentence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSentence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentence, other.sentence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeatures()).compareTo(other.isSetFeatures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeatures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.features, other.features);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTreebank()).compareTo(other.isSetTreebank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTreebank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.treebank, other.treebank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChunks()).compareTo(other.isSetChunks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChunks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chunks, other.chunks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSentiment()).compareTo(other.isSetSentiment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSentiment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentiment, other.sentiment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftSentence(");
    boolean first = true;

    sb.append("sentence:");
    if (this.sentence == null) {
      sb.append("null");
    } else {
      sb.append(this.sentence);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("features:");
    if (this.features == null) {
      sb.append("null");
    } else {
      sb.append(this.features);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("treebank:");
    if (this.treebank == null) {
      sb.append("null");
    } else {
      sb.append(this.treebank);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chunks:");
    if (this.chunks == null) {
      sb.append("null");
    } else {
      sb.append(this.chunks);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sentiment:");
    sb.append(this.sentiment);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftSentenceStandardSchemeFactory implements SchemeFactory {
    public ThriftSentenceStandardScheme getScheme() {
      return new ThriftSentenceStandardScheme();
    }
  }

  private static class ThriftSentenceStandardScheme extends StandardScheme<ThriftSentence> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftSentence struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case -1: // SENTENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sentence = iprot.readString();
              struct.setSentenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -2: // FEATURES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.features = new HashSet<String>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.features.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setFeaturesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -3: // TREEBANK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.treebank = iprot.readString();
              struct.setTreebankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -4: // CHUNKS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.chunks = new ArrayList<String>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  String _elem5;
                  _elem5 = iprot.readString();
                  struct.chunks.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setChunksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case -5: // SENTIMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sentiment = iprot.readI32();
              struct.setSentimentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftSentence struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SENTIMENT_FIELD_DESC);
      oprot.writeI32(struct.sentiment);
      oprot.writeFieldEnd();
      if (struct.chunks != null) {
        oprot.writeFieldBegin(CHUNKS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.chunks.size()));
          for (String _iter6 : struct.chunks)
          {
            oprot.writeString(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.treebank != null) {
        oprot.writeFieldBegin(TREEBANK_FIELD_DESC);
        oprot.writeString(struct.treebank);
        oprot.writeFieldEnd();
      }
      if (struct.features != null) {
        oprot.writeFieldBegin(FEATURES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.features.size()));
          for (String _iter7 : struct.features)
          {
            oprot.writeString(_iter7);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sentence != null) {
        oprot.writeFieldBegin(SENTENCE_FIELD_DESC);
        oprot.writeString(struct.sentence);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftSentenceTupleSchemeFactory implements SchemeFactory {
    public ThriftSentenceTupleScheme getScheme() {
      return new ThriftSentenceTupleScheme();
    }
  }

  private static class ThriftSentenceTupleScheme extends TupleScheme<ThriftSentence> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftSentence struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSentence()) {
        optionals.set(0);
      }
      if (struct.isSetFeatures()) {
        optionals.set(1);
      }
      if (struct.isSetTreebank()) {
        optionals.set(2);
      }
      if (struct.isSetChunks()) {
        optionals.set(3);
      }
      if (struct.isSetSentiment()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetSentence()) {
        oprot.writeString(struct.sentence);
      }
      if (struct.isSetFeatures()) {
        {
          oprot.writeI32(struct.features.size());
          for (String _iter8 : struct.features)
          {
            oprot.writeString(_iter8);
          }
        }
      }
      if (struct.isSetTreebank()) {
        oprot.writeString(struct.treebank);
      }
      if (struct.isSetChunks()) {
        {
          oprot.writeI32(struct.chunks.size());
          for (String _iter9 : struct.chunks)
          {
            oprot.writeString(_iter9);
          }
        }
      }
      if (struct.isSetSentiment()) {
        oprot.writeI32(struct.sentiment);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftSentence struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.sentence = iprot.readString();
        struct.setSentenceIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set10 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.features = new HashSet<String>(2*_set10.size);
          for (int _i11 = 0; _i11 < _set10.size; ++_i11)
          {
            String _elem12;
            _elem12 = iprot.readString();
            struct.features.add(_elem12);
          }
        }
        struct.setFeaturesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.treebank = iprot.readString();
        struct.setTreebankIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.chunks = new ArrayList<String>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            String _elem15;
            _elem15 = iprot.readString();
            struct.chunks.add(_elem15);
          }
        }
        struct.setChunksIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sentiment = iprot.readI32();
        struct.setSentimentIsSet(true);
      }
    }
  }

}

